service:
  name: contact-book-app

plugins:
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-plugin-tracing
provider:
  tracing:
    lambda: true
    apiGateway: true
    iamRoleStatements:
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - 'xray:PutTelemetryRecords'
          - 'xray:PutTraceSegments'
        Resource:
          - '*'
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}

  environment:
    CONTACTS_TABLE: Contacts-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    IMAGES_S3_BUCKET: serverless-anubmish-contact-book-final-project-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET: bGCIamMjFGPm_NEw2rfG2U83p66jwDDqHeYYq-rlx3ZjqDjU-tN7PnNtZHgR9aox
    SIGNED_URL_EXPIRATION: 300
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/* 
custom:
  topicName: ServerlessContactBookProject-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: CONTACTS BACKEND API
        description: Contact book app that can be used personally or commercially 
    models:
      - name: UpdateContact
        contentType: application/json
        schema: ${file(models/update-contact-model.json)}
      - name: CreateContact
        contentType: application/json
        schema: ${file(models/create-contact-model.json)}
functions:

  Auth:
    handler: src/lambda/auth/auth0rs256Authorizer.handler

  UpdateContact:
    handler: src/lambda/http/updateContact.handler
    events:
      - http:
          method: put
          path: contact/{contactId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: contact can be updated using this api
            description: contact can be updated using this api
            requestModels:
              'application/json': UpdateContact 
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
  GetContactById:
    handler: src/lambda/http/getContactById.handler
    events:
      - http:
          method: get
          path: contacts/{contactId}
          authorizer: Auth
          cors: true
          documentation:
            summary: this api can be used to get a contact by its ID
            description: this api can be used to get a contact by its ID
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}

  GetContacts:
    handler: src/lambda/http/getContacts.handler
    events:
      - http:
          method: get
          path: contacts
          authorizer: Auth
          cors: true
          documentation:
            summary: this api can be used to get all contacts
            description: this api can be used to get all contacts
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          # - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  CreateContact:
    handler: src/lambda/http/createContact.handler
    events:
      - http:
          method: post
          path: contacts
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: This API can be used to create a new entry of contact for a logged in user
            description: This API can be used to create a new entry of contact for a logged in user
            requestModels:
              'application/json': CreateContact 
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
        
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: contacts/{contactId}/attachment
          authorizer: Auth
          cors: true

  DeleteContact:
    handler: src/lambda/http/deleteContact.handler
    events:
      - http:
          method: delete
          path: contacts/{contactId}
          authorizer: Auth
          cors: true
          documentation:
            summary: this api can be used to delete a contact by its id
            description: this api can be used to delete a contact by its id
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ContactsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: contactId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: contactId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONTACTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: contactId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
              
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 4000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket